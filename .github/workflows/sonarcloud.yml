name: SonarCloud
on:
  push:
    branches:
      - master
      - sonar-validation
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      checks: write
      issues: read
      security-events: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.sonar/cache
          key: ${{ runner.os }}-node-sonar-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-sonar-

      - name: Install dependencies
        run: npm ci

      - name: Run Tests with Coverage
        run: npm run test:coverage
        
      - name: Validate Coverage
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            TOTAL_COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              console.log(coverage.total.lines.pct);
            ")
            
            echo "Total Coverage: $TOTAL_COVERAGE%"
            
            if (( $(echo "$TOTAL_COVERAGE < 70" | bc -l) )); then
              echo "❌ Coverage ($TOTAL_COVERAGE%) is below minimum threshold (70%)"
              exit 1
            fi
          else
            echo "⚠️ No coverage report found"
            exit 1
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCANNER_OPTS: "-Xmx2048m -Dsonar.organization=spongebug -Dsonar.projectKey=SpongeBUG_DEB"

      - name: Check Quality Gate
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Generate Analysis Summary
        if: always()
        run: |
          echo "### SonarCloud Analysis Results 📊" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "coverage/coverage-summary.json" ]; then
            TOTAL_COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              console.log(coverage.total.lines.pct);
            ")
            echo "**Total Coverage:** ${TOTAL_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            
            echo "#### Coverage Details" >> $GITHUB_STEP_SUMMARY
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              for (const [path, data] of Object.entries(coverage)) {
                if (path !== 'total') {
                  console.log(\`* \${path}: \${data.lines.pct}%\`);
                }
              }
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.sonarqube-quality-gate-check.outcome }}" == "success" ]]; then
            echo "✅ **Quality Gate:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality Gate:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "🔗 [View Full Report](https://sonarcloud.io/dashboard?id=SpongeBUG_DEB)" >> $GITHUB_STEP_SUMMARY